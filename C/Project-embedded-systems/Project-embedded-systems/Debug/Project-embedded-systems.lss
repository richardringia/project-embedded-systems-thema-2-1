
Project-embedded-systems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800100  00800100  00000726  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f0f  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d9  00000000  00000000  0000176f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea2  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011128  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000566  00000000  00000000  000142d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0001483a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003ea9  00000000  00000000  000148e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	0e c1       	rjmp	.+540    	; 0x226 <__vector_2>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	d3 c0       	rjmp	.+422    	; 0x1dc <__vector_13>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 33       	cpi	r26, 0x35	; 53
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	7d d1       	rcall	.+762    	; 0x396 <main>
  9c:	08 c3       	rjmp	.+1552   	; 0x6ae <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <board_init>:
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	8f 77       	andi	r24, 0x7F	; 127
  a8:	84 b9       	out	0x04, r24	; 4
  aa:	89 2f       	mov	r24, r25
  ac:	80 6a       	ori	r24, 0xA0	; 160
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret

000000b2 <uart_init>:
	int i = 0;
	
	for(i=0; i< index; i++){
		values + array[index];
	}
	avg_temp = values;
  b2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  b6:	83 e3       	ldi	r24, 0x33	; 51
  b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  bc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  cc:	2f e3       	ldi	r18, 0x3F	; 63
  ce:	8d e0       	ldi	r24, 0x0D	; 13
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <uart_init+0x20>
  da:	00 c0       	rjmp	.+0      	; 0xdc <uart_init+0x2a>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <uart_read>:
  e0:	e0 ec       	ldi	r30, 0xC0	; 192
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	ec f7       	brge	.-6      	; 0xe4 <uart_read+0x4>
  ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ee:	08 95       	ret

000000f0 <uart_putc>:
  f0:	e0 ec       	ldi	r30, 0xC0	; 192
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	95 ff       	sbrs	r25, 5
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <uart_putc+0x4>
  fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  fe:	08 95       	ret

00000100 <uart_transmit>:
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	c8 2f       	mov	r28, r24
 106:	84 36       	cpi	r24, 0x64	; 100
 108:	88 f0       	brcs	.+34     	; 0x12c <uart_transmit+0x2c>
 10a:	8c e9       	ldi	r24, 0x9C	; 156
 10c:	8c 0f       	add	r24, r28
 10e:	84 36       	cpi	r24, 0x64	; 100
 110:	38 f0       	brcs	.+14     	; 0x120 <uart_transmit+0x20>
 112:	88 e3       	ldi	r24, 0x38	; 56
 114:	8c 0f       	add	r24, r28
 116:	84 36       	cpi	r24, 0x64	; 100
 118:	30 f0       	brcs	.+12     	; 0x126 <uart_transmit+0x26>
 11a:	cc 52       	subi	r28, 0x2C	; 44
 11c:	83 e3       	ldi	r24, 0x33	; 51
 11e:	07 c0       	rjmp	.+14     	; 0x12e <uart_transmit+0x2e>
 120:	c8 2f       	mov	r28, r24
 122:	81 e3       	ldi	r24, 0x31	; 49
 124:	04 c0       	rjmp	.+8      	; 0x12e <uart_transmit+0x2e>
 126:	c8 2f       	mov	r28, r24
 128:	82 e3       	ldi	r24, 0x32	; 50
 12a:	01 c0       	rjmp	.+2      	; 0x12e <uart_transmit+0x2e>
 12c:	80 e3       	ldi	r24, 0x30	; 48
 12e:	ca 30       	cpi	r28, 0x0A	; 10
 130:	98 f0       	brcs	.+38     	; 0x158 <uart_transmit+0x58>
 132:	d0 e3       	ldi	r29, 0x30	; 48
 134:	ca 50       	subi	r28, 0x0A	; 10
 136:	df 5f       	subi	r29, 0xFF	; 255
 138:	ca 30       	cpi	r28, 0x0A	; 10
 13a:	e0 f7       	brcc	.-8      	; 0x134 <uart_transmit+0x34>
 13c:	80 33       	cpi	r24, 0x30	; 48
 13e:	11 f4       	brne	.+4      	; 0x144 <uart_transmit+0x44>
 140:	08 c0       	rjmp	.+16     	; 0x152 <uart_transmit+0x52>
 142:	d0 e3       	ldi	r29, 0x30	; 48
 144:	d5 df       	rcall	.-86     	; 0xf0 <uart_putc>
 146:	8d 2f       	mov	r24, r29
 148:	d3 df       	rcall	.-90     	; 0xf0 <uart_putc>
 14a:	80 e3       	ldi	r24, 0x30	; 48
 14c:	8c 0f       	add	r24, r28
 14e:	d0 df       	rcall	.-96     	; 0xf0 <uart_putc>
 150:	06 c0       	rjmp	.+12     	; 0x15e <uart_transmit+0x5e>
 152:	d0 33       	cpi	r29, 0x30	; 48
 154:	c1 f7       	brne	.-16     	; 0x146 <uart_transmit+0x46>
 156:	f9 cf       	rjmp	.-14     	; 0x14a <uart_transmit+0x4a>
 158:	80 33       	cpi	r24, 0x30	; 48
 15a:	99 f7       	brne	.-26     	; 0x142 <uart_transmit+0x42>
 15c:	f6 cf       	rjmp	.-20     	; 0x14a <uart_transmit+0x4a>
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <adc_init>:
 164:	80 e4       	ldi	r24, 0x40	; 64
 166:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 16a:	87 e8       	ldi	r24, 0x87	; 135
 16c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 170:	08 95       	ret

00000172 <adc_read>:
 172:	ec e7       	ldi	r30, 0x7C	; 124
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	90 81       	ld	r25, Z
 178:	98 7f       	andi	r25, 0xF8	; 248
 17a:	87 70       	andi	r24, 0x07	; 7
 17c:	89 2b       	or	r24, r25
 17e:	80 83       	st	Z, r24
 180:	ea e7       	ldi	r30, 0x7A	; 122
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 64       	ori	r24, 0x40	; 64
 188:	80 83       	st	Z, r24
 18a:	80 81       	ld	r24, Z
 18c:	86 fd       	sbrc	r24, 6
 18e:	fd cf       	rjmp	.-6      	; 0x18a <adc_read+0x18>
 190:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 194:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 198:	08 95       	ret

0000019a <get_light>:
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	ea df       	rcall	.-44     	; 0x172 <adc_read>
 19e:	bc 01       	movw	r22, r24
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	93 c1       	rjmp	.+806    	; 0x4cc <__floatunsisf>
 1a6:	08 95       	ret

000001a8 <get_temp>:
}

// TODO: change port number
float get_temp() {
	float value = adc_read(0) * 4.68;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	e3 df       	rcall	.-58     	; 0x172 <adc_read>
 1ac:	bc 01       	movw	r22, r24
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	8c d1       	rcall	.+792    	; 0x4cc <__floatunsisf>
 1b4:	2f e8       	ldi	r18, 0x8F	; 143
 1b6:	32 ec       	ldi	r19, 0xC2	; 194
 1b8:	45 e9       	ldi	r20, 0x95	; 149
 1ba:	50 e4       	ldi	r21, 0x40	; 64
 1bc:	15 d2       	rcall	.+1066   	; 0x5e8 <__mulsf3>
	value /= 1024.0;
	return (value - 0.5) * 100;
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e8       	ldi	r20, 0x80	; 128
 1c4:	5a e3       	ldi	r21, 0x3A	; 58
 1c6:	10 d2       	rcall	.+1056   	; 0x5e8 <__mulsf3>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	5f e3       	ldi	r21, 0x3F	; 63
 1d0:	ec d0       	rcall	.+472    	; 0x3aa <__subsf3>
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	48 ec       	ldi	r20, 0xC8	; 200
 1d8:	52 e4       	ldi	r21, 0x42	; 66
}
 1da:	06 c2       	rjmp	.+1036   	; 0x5e8 <__mulsf3>

000001dc <__vector_13>:
uint16_t timer_value = 0;
uint16_t distance_cm;
uint8_t	error;

ISR(TIMER1_OVF_vect)
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
	if(rising_edge==1)
 1ea:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rising_edge>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	99 f4       	brne	.+38     	; 0x218 <__vector_13+0x3c>
	{
		timer_value++;
 1f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
		if(timer_value > 91)
 204:	8c 35       	cpi	r24, 0x5C	; 92
 206:	91 05       	cpc	r25, r1
 208:	38 f0       	brcs	.+14     	; 0x218 <__vector_13+0x3c>
		{
			working = 0;
 20a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <working>
			rising_edge = 0;
 20e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <rising_edge>
			error = 1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <error>
		}
	}
}
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_2>:

ISR (INT1_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	if(working==1)
 248:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <working>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	09 f0       	breq	.+2      	; 0x252 <__vector_2+0x2c>
 250:	3b c0       	rjmp	.+118    	; 0x2c8 <__vector_2+0xa2>
	{
		PORTD = 0b10000000;
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	8b b9       	out	0x0b, r24	; 11
		if(rising_edge==0)
 256:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <rising_edge>
 25a:	81 11       	cpse	r24, r1
 25c:	0c c0       	rjmp	.+24     	; 0x276 <__vector_2+0x50>
		{
			rising_edge=1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <rising_edge>
			TCNT1 = 0;
 264:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 268:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
			timer_value = 0;
 26c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 270:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 274:	2b c0       	rjmp	.+86     	; 0x2cc <__vector_2+0xa6>
		}
		else
		{
			rising_edge = 0;
 276:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <rising_edge>
			distance_cm = (timer_value * 65536 + TCNT1)*0.5*0.0023;
 27a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 27e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 282:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_end>
 286:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_end+0x1>
 28a:	cb 01       	movw	r24, r22
 28c:	a0 e0       	ldi	r26, 0x00	; 0
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	dc 01       	movw	r26, r24
 292:	99 27       	eor	r25, r25
 294:	88 27       	eor	r24, r24
 296:	bc 01       	movw	r22, r24
 298:	cd 01       	movw	r24, r26
 29a:	62 0f       	add	r22, r18
 29c:	73 1f       	adc	r23, r19
 29e:	81 1d       	adc	r24, r1
 2a0:	91 1d       	adc	r25, r1
 2a2:	16 d1       	rcall	.+556    	; 0x4d0 <__floatsisf>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	5f e3       	ldi	r21, 0x3F	; 63
 2ac:	9d d1       	rcall	.+826    	; 0x5e8 <__mulsf3>
 2ae:	29 e9       	ldi	r18, 0x99	; 153
 2b0:	3b eb       	ldi	r19, 0xBB	; 187
 2b2:	46 e1       	ldi	r20, 0x16	; 22
 2b4:	5b e3       	ldi	r21, 0x3B	; 59
 2b6:	98 d1       	rcall	.+816    	; 0x5e8 <__mulsf3>
 2b8:	dd d0       	rcall	.+442    	; 0x474 <__fixunssfsi>
 2ba:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <distance_cm+0x1>
 2be:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <distance_cm>
			working = 0;
 2c2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <working>
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <__vector_2+0xa6>
		}
	} else {
		PORTD = 0b01000000;
 2c8:	80 e4       	ldi	r24, 0x40	; 64
 2ca:	8b b9       	out	0x0b, r24	; 11
	}
	TCCR1B = _BV(CS10);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <Send_signal>:


void Send_signal()
{
	if(working==0)
 2f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <working>
 2f8:	81 11       	cpse	r24, r1
 2fa:	13 c0       	rjmp	.+38     	; 0x322 <Send_signal+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	83 ed       	ldi	r24, 0xD3	; 211
 2fe:	90 e3       	ldi	r25, 0x30	; 48
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <Send_signal+0xc>
 304:	00 c0       	rjmp	.+0      	; 0x306 <Send_signal+0x12>
 306:	00 00       	nop
	{
		_delay_ms(50);
		PORTB &=~ (1<<PIND0);
 308:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	00 00       	nop
		_delay_us(1);
		PORTB |= (1<<PIND0);
 30c:	28 9a       	sbi	0x05, 0	; 5
 30e:	93 e0       	ldi	r25, 0x03	; 3
 310:	9a 95       	dec	r25
 312:	f1 f7       	brne	.-4      	; 0x310 <Send_signal+0x1c>
 314:	00 00       	nop
		_delay_us(10);
		PORTB &=~ (1<<PIND0);
 316:	28 98       	cbi	0x05, 0	; 5
		working = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <working>
		error = 0;
 31e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <error>
 322:	08 95       	ret

00000324 <get_distance>:
}


uint16_t get_distance()
{
	Send_signal();
 324:	e7 df       	rcall	.-50     	; 0x2f4 <Send_signal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 326:	2f e3       	ldi	r18, 0x3F	; 63
 328:	8d e0       	ldi	r24, 0x0D	; 13
 32a:	93 e0       	ldi	r25, 0x03	; 3
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <get_distance+0x8>
 334:	00 c0       	rjmp	.+0      	; 0x336 <get_distance+0x12>
 336:	00 00       	nop
	_delay_ms(1000);
	return distance_cm;
}
 338:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <distance_cm>
 33c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <distance_cm+0x1>
 340:	08 95       	ret

00000342 <init_timer>:

void init_timer(void)
// prescaling : max time = 2^16/16E6 = 4.1 ms, 4.1 >> 2.3, so no prescaling required
// normal mode, no prescale, stop timer
{
	TCCR1A = 0;
 342:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0;
 346:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCNT1 = 0;
 34a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 34e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIMSK1 = (1<<TOIE0);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 358:	08 95       	ret

0000035a <init_ext_int>:
}

void init_ext_int(void)
{
	// any change triggers ext interrupt 1
	EICRA |= (1 << ISC10);
 35a:	e9 e6       	ldi	r30, 0x69	; 105
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	84 60       	ori	r24, 0x04	; 4
 362:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1);
 364:	e9 9a       	sbi	0x1d, 1	; 29
 366:	08 95       	ret

00000368 <distance_init>:
}


void distance_init()
{
	init_ext_int();
 368:	f8 df       	rcall	.-16     	; 0x35a <init_ext_int>
	init_timer();
 36a:	eb df       	rcall	.-42     	; 0x342 <init_timer>
 36c:	78 94       	sei
	sei();
 36e:	08 95       	ret

00000370 <send_data>:
 370:	81 33       	cpi	r24, 0x31	; 49
/************************************************************************/
void send_data(uint8_t read_data)
{
	uint8_t data = 0;
	
	switch (read_data)
 372:	41 f0       	breq	.+16     	; 0x384 <send_data+0x14>
 374:	82 33       	cpi	r24, 0x32	; 50
 376:	51 f0       	breq	.+20     	; 0x38c <send_data+0x1c>
 378:	80 33       	cpi	r24, 0x30	; 48
 37a:	51 f4       	brne	.+20     	; 0x390 <send_data+0x20>
	{
		case 0x30: // temperature
			data = get_temp();
 37c:	15 df       	rcall	.-470    	; 0x1a8 <get_temp>
 37e:	7a d0       	rcall	.+244    	; 0x474 <__fixunssfsi>
 380:	86 2f       	mov	r24, r22
		break;
		case 0x31: // light
			data = get_light();
 382:	07 c0       	rjmp	.+14     	; 0x392 <send_data+0x22>
 384:	0a df       	rcall	.-492    	; 0x19a <get_light>
 386:	76 d0       	rcall	.+236    	; 0x474 <__fixunssfsi>
 388:	86 2f       	mov	r24, r22
		break;
		case 0x32: // ultrazone
			data = get_distance();
 38a:	03 c0       	rjmp	.+6      	; 0x392 <send_data+0x22>
 38c:	cb df       	rcall	.-106    	; 0x324 <get_distance>
		break;
 38e:	01 c0       	rjmp	.+2      	; 0x392 <send_data+0x22>
/* 1 (0x31) = light sensor												*/
/* 2 (0x32) = ultrazone senor                                           */
/************************************************************************/
void send_data(uint8_t read_data)
{
	uint8_t data = 0;
 390:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	
	uart_transmit(data);
 392:	b6 ce       	rjmp	.-660    	; 0x100 <uart_transmit>
 394:	08 95       	ret

00000396 <main>:
 396:	14 b8       	out	0x04, r1	; 4
}

int main (void)
{
	DDRB = 0x00;
	DDRD = 0xff;
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	8a b9       	out	0x0a, r24	; 10
	
	// init
	board_init();
 39c:	81 de       	rcall	.-766    	; 0xa0 <board_init>
	uart_init();	
 39e:	89 de       	rcall	.-750    	; 0xb2 <uart_init>
	adc_init();
 3a0:	e1 de       	rcall	.-574    	; 0x164 <adc_init>
	distance_init();
 3a2:	e2 df       	rcall	.-60     	; 0x368 <distance_init>
 3a4:	9d de       	rcall	.-710    	; 0xe0 <uart_read>
	
	while (1) {
		
		//uint8_t temp = usart_read();
		
		uint8_t read_data = uart_read();
 3a6:	e4 df       	rcall	.-56     	; 0x370 <send_data>
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <main+0xe>

000003aa <__subsf3>:
		//usart_transmit(temp);
		//UART_putc("A");
		//uart_transmit(read_data);
		//UART_puthex8(0x41);
		send_data(read_data);
 3aa:	50 58       	subi	r21, 0x80	; 128

000003ac <__addsf3>:
 3ac:	bb 27       	eor	r27, r27
 3ae:	aa 27       	eor	r26, r26
 3b0:	0e d0       	rcall	.+28     	; 0x3ce <__addsf3x>
 3b2:	e0 c0       	rjmp	.+448    	; 0x574 <__fp_round>
 3b4:	d1 d0       	rcall	.+418    	; 0x558 <__fp_pscA>
 3b6:	30 f0       	brcs	.+12     	; 0x3c4 <__addsf3+0x18>
 3b8:	d6 d0       	rcall	.+428    	; 0x566 <__fp_pscB>
 3ba:	20 f0       	brcs	.+8      	; 0x3c4 <__addsf3+0x18>
 3bc:	31 f4       	brne	.+12     	; 0x3ca <__addsf3+0x1e>
 3be:	9f 3f       	cpi	r25, 0xFF	; 255
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <__addsf3+0x1a>
 3c2:	1e f4       	brtc	.+6      	; 0x3ca <__addsf3+0x1e>
 3c4:	c6 c0       	rjmp	.+396    	; 0x552 <__fp_nan>
 3c6:	0e f4       	brtc	.+2      	; 0x3ca <__addsf3+0x1e>
 3c8:	e0 95       	com	r30
 3ca:	e7 fb       	bst	r30, 7
 3cc:	bc c0       	rjmp	.+376    	; 0x546 <__fp_inf>

000003ce <__addsf3x>:
 3ce:	e9 2f       	mov	r30, r25
 3d0:	e2 d0       	rcall	.+452    	; 0x596 <__fp_split3>
 3d2:	80 f3       	brcs	.-32     	; 0x3b4 <__addsf3+0x8>
 3d4:	ba 17       	cp	r27, r26
 3d6:	62 07       	cpc	r22, r18
 3d8:	73 07       	cpc	r23, r19
 3da:	84 07       	cpc	r24, r20
 3dc:	95 07       	cpc	r25, r21
 3de:	18 f0       	brcs	.+6      	; 0x3e6 <__addsf3x+0x18>
 3e0:	71 f4       	brne	.+28     	; 0x3fe <__addsf3x+0x30>
 3e2:	9e f5       	brtc	.+102    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3e4:	fa c0       	rjmp	.+500    	; 0x5da <__fp_zero>
 3e6:	0e f4       	brtc	.+2      	; 0x3ea <__addsf3x+0x1c>
 3e8:	e0 95       	com	r30
 3ea:	0b 2e       	mov	r0, r27
 3ec:	ba 2f       	mov	r27, r26
 3ee:	a0 2d       	mov	r26, r0
 3f0:	0b 01       	movw	r0, r22
 3f2:	b9 01       	movw	r22, r18
 3f4:	90 01       	movw	r18, r0
 3f6:	0c 01       	movw	r0, r24
 3f8:	ca 01       	movw	r24, r20
 3fa:	a0 01       	movw	r20, r0
 3fc:	11 24       	eor	r1, r1
 3fe:	ff 27       	eor	r31, r31
 400:	59 1b       	sub	r21, r25
 402:	99 f0       	breq	.+38     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 404:	59 3f       	cpi	r21, 0xF9	; 249
 406:	50 f4       	brcc	.+20     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 408:	50 3e       	cpi	r21, 0xE0	; 224
 40a:	68 f1       	brcs	.+90     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 40c:	1a 16       	cp	r1, r26
 40e:	f0 40       	sbci	r31, 0x00	; 0
 410:	a2 2f       	mov	r26, r18
 412:	23 2f       	mov	r18, r19
 414:	34 2f       	mov	r19, r20
 416:	44 27       	eor	r20, r20
 418:	58 5f       	subi	r21, 0xF8	; 248
 41a:	f3 cf       	rjmp	.-26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 41c:	46 95       	lsr	r20
 41e:	37 95       	ror	r19
 420:	27 95       	ror	r18
 422:	a7 95       	ror	r26
 424:	f0 40       	sbci	r31, 0x00	; 0
 426:	53 95       	inc	r21
 428:	c9 f7       	brne	.-14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 42a:	7e f4       	brtc	.+30     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42c:	1f 16       	cp	r1, r31
 42e:	ba 0b       	sbc	r27, r26
 430:	62 0b       	sbc	r22, r18
 432:	73 0b       	sbc	r23, r19
 434:	84 0b       	sbc	r24, r20
 436:	ba f0       	brmi	.+46     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 438:	91 50       	subi	r25, 0x01	; 1
 43a:	a1 f0       	breq	.+40     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 43c:	ff 0f       	add	r31, r31
 43e:	bb 1f       	adc	r27, r27
 440:	66 1f       	adc	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	88 1f       	adc	r24, r24
 446:	c2 f7       	brpl	.-16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 448:	0e c0       	rjmp	.+28     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 44a:	ba 0f       	add	r27, r26
 44c:	62 1f       	adc	r22, r18
 44e:	73 1f       	adc	r23, r19
 450:	84 1f       	adc	r24, r20
 452:	48 f4       	brcc	.+18     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 454:	87 95       	ror	r24
 456:	77 95       	ror	r23
 458:	67 95       	ror	r22
 45a:	b7 95       	ror	r27
 45c:	f7 95       	ror	r31
 45e:	9e 3f       	cpi	r25, 0xFE	; 254
 460:	08 f0       	brcs	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	b3 cf       	rjmp	.-154    	; 0x3ca <__addsf3+0x1e>
 464:	93 95       	inc	r25
 466:	88 0f       	add	r24, r24
 468:	08 f0       	brcs	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	99 27       	eor	r25, r25
 46c:	ee 0f       	add	r30, r30
 46e:	97 95       	ror	r25
 470:	87 95       	ror	r24
 472:	08 95       	ret

00000474 <__fixunssfsi>:
 474:	98 d0       	rcall	.+304    	; 0x5a6 <__fp_splitA>
 476:	88 f0       	brcs	.+34     	; 0x49a <__fixunssfsi+0x26>
 478:	9f 57       	subi	r25, 0x7F	; 127
 47a:	90 f0       	brcs	.+36     	; 0x4a0 <__fixunssfsi+0x2c>
 47c:	b9 2f       	mov	r27, r25
 47e:	99 27       	eor	r25, r25
 480:	b7 51       	subi	r27, 0x17	; 23
 482:	a0 f0       	brcs	.+40     	; 0x4ac <__fixunssfsi+0x38>
 484:	d1 f0       	breq	.+52     	; 0x4ba <__fixunssfsi+0x46>
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	88 1f       	adc	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	1a f0       	brmi	.+6      	; 0x496 <__fixunssfsi+0x22>
 490:	ba 95       	dec	r27
 492:	c9 f7       	brne	.-14     	; 0x486 <__fixunssfsi+0x12>
 494:	12 c0       	rjmp	.+36     	; 0x4ba <__fixunssfsi+0x46>
 496:	b1 30       	cpi	r27, 0x01	; 1
 498:	81 f0       	breq	.+32     	; 0x4ba <__fixunssfsi+0x46>
 49a:	9f d0       	rcall	.+318    	; 0x5da <__fp_zero>
 49c:	b1 e0       	ldi	r27, 0x01	; 1
 49e:	08 95       	ret
 4a0:	9c c0       	rjmp	.+312    	; 0x5da <__fp_zero>
 4a2:	67 2f       	mov	r22, r23
 4a4:	78 2f       	mov	r23, r24
 4a6:	88 27       	eor	r24, r24
 4a8:	b8 5f       	subi	r27, 0xF8	; 248
 4aa:	39 f0       	breq	.+14     	; 0x4ba <__fixunssfsi+0x46>
 4ac:	b9 3f       	cpi	r27, 0xF9	; 249
 4ae:	cc f3       	brlt	.-14     	; 0x4a2 <__fixunssfsi+0x2e>
 4b0:	86 95       	lsr	r24
 4b2:	77 95       	ror	r23
 4b4:	67 95       	ror	r22
 4b6:	b3 95       	inc	r27
 4b8:	d9 f7       	brne	.-10     	; 0x4b0 <__fixunssfsi+0x3c>
 4ba:	3e f4       	brtc	.+14     	; 0x4ca <__fixunssfsi+0x56>
 4bc:	90 95       	com	r25
 4be:	80 95       	com	r24
 4c0:	70 95       	com	r23
 4c2:	61 95       	neg	r22
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	8f 4f       	sbci	r24, 0xFF	; 255
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	08 95       	ret

000004cc <__floatunsisf>:
 4cc:	e8 94       	clt
 4ce:	09 c0       	rjmp	.+18     	; 0x4e2 <__floatsisf+0x12>

000004d0 <__floatsisf>:
 4d0:	97 fb       	bst	r25, 7
 4d2:	3e f4       	brtc	.+14     	; 0x4e2 <__floatsisf+0x12>
 4d4:	90 95       	com	r25
 4d6:	80 95       	com	r24
 4d8:	70 95       	com	r23
 4da:	61 95       	neg	r22
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	8f 4f       	sbci	r24, 0xFF	; 255
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	99 23       	and	r25, r25
 4e4:	a9 f0       	breq	.+42     	; 0x510 <__floatsisf+0x40>
 4e6:	f9 2f       	mov	r31, r25
 4e8:	96 e9       	ldi	r25, 0x96	; 150
 4ea:	bb 27       	eor	r27, r27
 4ec:	93 95       	inc	r25
 4ee:	f6 95       	lsr	r31
 4f0:	87 95       	ror	r24
 4f2:	77 95       	ror	r23
 4f4:	67 95       	ror	r22
 4f6:	b7 95       	ror	r27
 4f8:	f1 11       	cpse	r31, r1
 4fa:	f8 cf       	rjmp	.-16     	; 0x4ec <__floatsisf+0x1c>
 4fc:	fa f4       	brpl	.+62     	; 0x53c <__floatsisf+0x6c>
 4fe:	bb 0f       	add	r27, r27
 500:	11 f4       	brne	.+4      	; 0x506 <__floatsisf+0x36>
 502:	60 ff       	sbrs	r22, 0
 504:	1b c0       	rjmp	.+54     	; 0x53c <__floatsisf+0x6c>
 506:	6f 5f       	subi	r22, 0xFF	; 255
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	8f 4f       	sbci	r24, 0xFF	; 255
 50c:	9f 4f       	sbci	r25, 0xFF	; 255
 50e:	16 c0       	rjmp	.+44     	; 0x53c <__floatsisf+0x6c>
 510:	88 23       	and	r24, r24
 512:	11 f0       	breq	.+4      	; 0x518 <__floatsisf+0x48>
 514:	96 e9       	ldi	r25, 0x96	; 150
 516:	11 c0       	rjmp	.+34     	; 0x53a <__floatsisf+0x6a>
 518:	77 23       	and	r23, r23
 51a:	21 f0       	breq	.+8      	; 0x524 <__floatsisf+0x54>
 51c:	9e e8       	ldi	r25, 0x8E	; 142
 51e:	87 2f       	mov	r24, r23
 520:	76 2f       	mov	r23, r22
 522:	05 c0       	rjmp	.+10     	; 0x52e <__floatsisf+0x5e>
 524:	66 23       	and	r22, r22
 526:	71 f0       	breq	.+28     	; 0x544 <__floatsisf+0x74>
 528:	96 e8       	ldi	r25, 0x86	; 134
 52a:	86 2f       	mov	r24, r22
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	2a f0       	brmi	.+10     	; 0x53c <__floatsisf+0x6c>
 532:	9a 95       	dec	r25
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	88 1f       	adc	r24, r24
 53a:	da f7       	brpl	.-10     	; 0x532 <__floatsisf+0x62>
 53c:	88 0f       	add	r24, r24
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	97 f9       	bld	r25, 7
 544:	08 95       	ret

00000546 <__fp_inf>:
 546:	97 f9       	bld	r25, 7
 548:	9f 67       	ori	r25, 0x7F	; 127
 54a:	80 e8       	ldi	r24, 0x80	; 128
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	08 95       	ret

00000552 <__fp_nan>:
 552:	9f ef       	ldi	r25, 0xFF	; 255
 554:	80 ec       	ldi	r24, 0xC0	; 192
 556:	08 95       	ret

00000558 <__fp_pscA>:
 558:	00 24       	eor	r0, r0
 55a:	0a 94       	dec	r0
 55c:	16 16       	cp	r1, r22
 55e:	17 06       	cpc	r1, r23
 560:	18 06       	cpc	r1, r24
 562:	09 06       	cpc	r0, r25
 564:	08 95       	ret

00000566 <__fp_pscB>:
 566:	00 24       	eor	r0, r0
 568:	0a 94       	dec	r0
 56a:	12 16       	cp	r1, r18
 56c:	13 06       	cpc	r1, r19
 56e:	14 06       	cpc	r1, r20
 570:	05 06       	cpc	r0, r21
 572:	08 95       	ret

00000574 <__fp_round>:
 574:	09 2e       	mov	r0, r25
 576:	03 94       	inc	r0
 578:	00 0c       	add	r0, r0
 57a:	11 f4       	brne	.+4      	; 0x580 <__fp_round+0xc>
 57c:	88 23       	and	r24, r24
 57e:	52 f0       	brmi	.+20     	; 0x594 <__fp_round+0x20>
 580:	bb 0f       	add	r27, r27
 582:	40 f4       	brcc	.+16     	; 0x594 <__fp_round+0x20>
 584:	bf 2b       	or	r27, r31
 586:	11 f4       	brne	.+4      	; 0x58c <__fp_round+0x18>
 588:	60 ff       	sbrs	r22, 0
 58a:	04 c0       	rjmp	.+8      	; 0x594 <__fp_round+0x20>
 58c:	6f 5f       	subi	r22, 0xFF	; 255
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	08 95       	ret

00000596 <__fp_split3>:
 596:	57 fd       	sbrc	r21, 7
 598:	90 58       	subi	r25, 0x80	; 128
 59a:	44 0f       	add	r20, r20
 59c:	55 1f       	adc	r21, r21
 59e:	59 f0       	breq	.+22     	; 0x5b6 <__fp_splitA+0x10>
 5a0:	5f 3f       	cpi	r21, 0xFF	; 255
 5a2:	71 f0       	breq	.+28     	; 0x5c0 <__fp_splitA+0x1a>
 5a4:	47 95       	ror	r20

000005a6 <__fp_splitA>:
 5a6:	88 0f       	add	r24, r24
 5a8:	97 fb       	bst	r25, 7
 5aa:	99 1f       	adc	r25, r25
 5ac:	61 f0       	breq	.+24     	; 0x5c6 <__fp_splitA+0x20>
 5ae:	9f 3f       	cpi	r25, 0xFF	; 255
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <__fp_splitA+0x2a>
 5b2:	87 95       	ror	r24
 5b4:	08 95       	ret
 5b6:	12 16       	cp	r1, r18
 5b8:	13 06       	cpc	r1, r19
 5ba:	14 06       	cpc	r1, r20
 5bc:	55 1f       	adc	r21, r21
 5be:	f2 cf       	rjmp	.-28     	; 0x5a4 <__fp_split3+0xe>
 5c0:	46 95       	lsr	r20
 5c2:	f1 df       	rcall	.-30     	; 0x5a6 <__fp_splitA>
 5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <__fp_splitA+0x30>
 5c6:	16 16       	cp	r1, r22
 5c8:	17 06       	cpc	r1, r23
 5ca:	18 06       	cpc	r1, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	f1 cf       	rjmp	.-30     	; 0x5b2 <__fp_splitA+0xc>
 5d0:	86 95       	lsr	r24
 5d2:	71 05       	cpc	r23, r1
 5d4:	61 05       	cpc	r22, r1
 5d6:	08 94       	sec
 5d8:	08 95       	ret

000005da <__fp_zero>:
 5da:	e8 94       	clt

000005dc <__fp_szero>:
 5dc:	bb 27       	eor	r27, r27
 5de:	66 27       	eor	r22, r22
 5e0:	77 27       	eor	r23, r23
 5e2:	cb 01       	movw	r24, r22
 5e4:	97 f9       	bld	r25, 7
 5e6:	08 95       	ret

000005e8 <__mulsf3>:
 5e8:	0b d0       	rcall	.+22     	; 0x600 <__mulsf3x>
 5ea:	c4 cf       	rjmp	.-120    	; 0x574 <__fp_round>
 5ec:	b5 df       	rcall	.-150    	; 0x558 <__fp_pscA>
 5ee:	28 f0       	brcs	.+10     	; 0x5fa <__mulsf3+0x12>
 5f0:	ba df       	rcall	.-140    	; 0x566 <__fp_pscB>
 5f2:	18 f0       	brcs	.+6      	; 0x5fa <__mulsf3+0x12>
 5f4:	95 23       	and	r25, r21
 5f6:	09 f0       	breq	.+2      	; 0x5fa <__mulsf3+0x12>
 5f8:	a6 cf       	rjmp	.-180    	; 0x546 <__fp_inf>
 5fa:	ab cf       	rjmp	.-170    	; 0x552 <__fp_nan>
 5fc:	11 24       	eor	r1, r1
 5fe:	ee cf       	rjmp	.-36     	; 0x5dc <__fp_szero>

00000600 <__mulsf3x>:
 600:	ca df       	rcall	.-108    	; 0x596 <__fp_split3>
 602:	a0 f3       	brcs	.-24     	; 0x5ec <__mulsf3+0x4>

00000604 <__mulsf3_pse>:
 604:	95 9f       	mul	r25, r21
 606:	d1 f3       	breq	.-12     	; 0x5fc <__mulsf3+0x14>
 608:	95 0f       	add	r25, r21
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	55 1f       	adc	r21, r21
 60e:	62 9f       	mul	r22, r18
 610:	f0 01       	movw	r30, r0
 612:	72 9f       	mul	r23, r18
 614:	bb 27       	eor	r27, r27
 616:	f0 0d       	add	r31, r0
 618:	b1 1d       	adc	r27, r1
 61a:	63 9f       	mul	r22, r19
 61c:	aa 27       	eor	r26, r26
 61e:	f0 0d       	add	r31, r0
 620:	b1 1d       	adc	r27, r1
 622:	aa 1f       	adc	r26, r26
 624:	64 9f       	mul	r22, r20
 626:	66 27       	eor	r22, r22
 628:	b0 0d       	add	r27, r0
 62a:	a1 1d       	adc	r26, r1
 62c:	66 1f       	adc	r22, r22
 62e:	82 9f       	mul	r24, r18
 630:	22 27       	eor	r18, r18
 632:	b0 0d       	add	r27, r0
 634:	a1 1d       	adc	r26, r1
 636:	62 1f       	adc	r22, r18
 638:	73 9f       	mul	r23, r19
 63a:	b0 0d       	add	r27, r0
 63c:	a1 1d       	adc	r26, r1
 63e:	62 1f       	adc	r22, r18
 640:	83 9f       	mul	r24, r19
 642:	a0 0d       	add	r26, r0
 644:	61 1d       	adc	r22, r1
 646:	22 1f       	adc	r18, r18
 648:	74 9f       	mul	r23, r20
 64a:	33 27       	eor	r19, r19
 64c:	a0 0d       	add	r26, r0
 64e:	61 1d       	adc	r22, r1
 650:	23 1f       	adc	r18, r19
 652:	84 9f       	mul	r24, r20
 654:	60 0d       	add	r22, r0
 656:	21 1d       	adc	r18, r1
 658:	82 2f       	mov	r24, r18
 65a:	76 2f       	mov	r23, r22
 65c:	6a 2f       	mov	r22, r26
 65e:	11 24       	eor	r1, r1
 660:	9f 57       	subi	r25, 0x7F	; 127
 662:	50 40       	sbci	r21, 0x00	; 0
 664:	8a f0       	brmi	.+34     	; 0x688 <__mulsf3_pse+0x84>
 666:	e1 f0       	breq	.+56     	; 0x6a0 <__mulsf3_pse+0x9c>
 668:	88 23       	and	r24, r24
 66a:	4a f0       	brmi	.+18     	; 0x67e <__mulsf3_pse+0x7a>
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	bb 1f       	adc	r27, r27
 672:	66 1f       	adc	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	88 1f       	adc	r24, r24
 678:	91 50       	subi	r25, 0x01	; 1
 67a:	50 40       	sbci	r21, 0x00	; 0
 67c:	a9 f7       	brne	.-22     	; 0x668 <__mulsf3_pse+0x64>
 67e:	9e 3f       	cpi	r25, 0xFE	; 254
 680:	51 05       	cpc	r21, r1
 682:	70 f0       	brcs	.+28     	; 0x6a0 <__mulsf3_pse+0x9c>
 684:	60 cf       	rjmp	.-320    	; 0x546 <__fp_inf>
 686:	aa cf       	rjmp	.-172    	; 0x5dc <__fp_szero>
 688:	5f 3f       	cpi	r21, 0xFF	; 255
 68a:	ec f3       	brlt	.-6      	; 0x686 <__mulsf3_pse+0x82>
 68c:	98 3e       	cpi	r25, 0xE8	; 232
 68e:	dc f3       	brlt	.-10     	; 0x686 <__mulsf3_pse+0x82>
 690:	86 95       	lsr	r24
 692:	77 95       	ror	r23
 694:	67 95       	ror	r22
 696:	b7 95       	ror	r27
 698:	f7 95       	ror	r31
 69a:	e7 95       	ror	r30
 69c:	9f 5f       	subi	r25, 0xFF	; 255
 69e:	c1 f7       	brne	.-16     	; 0x690 <__mulsf3_pse+0x8c>
 6a0:	fe 2b       	or	r31, r30
 6a2:	88 0f       	add	r24, r24
 6a4:	91 1d       	adc	r25, r1
 6a6:	96 95       	lsr	r25
 6a8:	87 95       	ror	r24
 6aa:	97 f9       	bld	r25, 7
 6ac:	08 95       	ret

000006ae <_exit>:
 6ae:	f8 94       	cli

000006b0 <__stop_program>:
 6b0:	ff cf       	rjmp	.-2      	; 0x6b0 <__stop_program>
